class Solution {
    public int getMaximumGold(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] max = new int[m][n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0) {
                    max[i][j] = dfs(grid, i, j, m, n);
                }
            }
        }
        
        int max1 = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max1 = Math.max(max[i][j], max1);
            }
        }
        return max1;
    }

    private int dfs(int[][] grid, int row, int col, int m, int n) {
        if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] == 0) {
            return 0;
        }
        
        int temp = grid[row][col];
        grid[row][col] = 0;
        
        int max = 0;
        for (int[] d : new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}) {
            max = Math.max(max, dfs(grid, row + d[0], col + d[1], m, n));
        }
        
        grid[row][col] = temp;
        return max + temp;
    }
}
